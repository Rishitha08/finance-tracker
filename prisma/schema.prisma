generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions     Transaction[]
  budgets          Budget[]
  goals            Goal[]
  customCategories CustomCategory[]

  @@map("users")
}

model CustomCategory {
  id        String   @id @default(cuid())
  name      String
  type      String   // 'income' or 'expense'
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, type, userId])
  @@map("custom_categories")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  category    String
  type        String   // 'income' or 'expense'
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Budget {
  id         String   @id @default(cuid())
  category   String
  amount     Float
  spent      Float    @default(0)
  month      Int
  year       Int
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([category, month, year, userId])
  @@map("budgets")
}

model Goal {
  id            String   @id @default(cuid())
  title         String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime
  description   String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}
